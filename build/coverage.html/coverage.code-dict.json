{"/home/travis/build/npmtest/node-npmtest-buffet/test.js":"/* istanbul instrument in package npmtest_buffet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-buffet/lib.npmtest_buffet.js":"/* istanbul instrument in package npmtest_buffet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_buffet = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_buffet = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-buffet/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-buffet && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_buffet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_buffet\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_buffet.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_buffet.rollup.js'] =\n            local.assetsDict['/assets.npmtest_buffet.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_buffet.__dirname + '/lib.npmtest_buffet.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-buffet/node_modules/buffet/index.js":"var Mayonnaise = require('mayonnaise').Mayonnaise\n  , inherits = require('util').inherits\n  , dish = require('dish')\n  , path = require('path')\n  , fs = require('fs')\n  , parseUrl = require('url').parse\n  , parsedUrls = {}\n\nfunction Buffet (specs, options) {\n  if (toString.call(specs) === '[object Object]') {\n    options = specs;\n    specs = null;\n  }\n  if (!specs) specs = 'public/**/*';\n  Mayonnaise.call(this, specs, options);\n  this.on('all', function (op, file) {\n    switch (op) {\n      case 'add': case 'update': case 'cleanup':\n        dish.clearCache(file.fullPath);\n        break;\n    }\n  });\n}\ninherits(Buffet, Mayonnaise);\n\nBuffet.prototype.middleware = function (options) {\n  var self = this;\n  options || (options = {});\n  options.defaultContentType = options.defaultContentType || 'application/octet-stream';\n  if (typeof options.maxAge === 'undefined') options.maxAge = 300;\n  options.index || (options.index = 'index.html');\n  options.notFoundPath || (options.notFoundPath = '/404.html');\n  if (options.notFoundPath[0] !== '/') {\n    options.notFoundPath = '/' + options.notFoundPath;\n  }\n\n  var mw = function (req, res, next) {\n    if (!next) next = function () {\n      mw.notFound(req, res);\n    };\n    if (req.method.match(/^get|head$/i)) {\n      // check for static file\n      if (self.ready) checkCache();\n      else {\n        self.once('ready', checkCache);\n      }\n    }\n    else next();\n\n    function checkCache () {\n      var urlPath = parsedUrls[req.url];\n      if (!urlPath) {\n        urlPath = parseUrl(req.url).pathname;\n        // Decode and strip nullbytes for security\n        try {\n          urlPath = decodeURIComponent(urlPath).replace(/\\0/g, '');\n        }\n        catch (err) {\n          return next();\n        }\n        parsedUrls[req.url] = urlPath;\n      }\n      var file = self.get(urlPath);\n      if (file && file.stat.isFile()) return dish.file(file.fullPath, options)(req, res, next);\n      if (options.index) {\n        if (urlPath !== '/') urlPath += '/';\n        urlPath += options.index;\n        file = self.get(urlPath);\n        if (file) return dish.file(file.fullPath, options)(req, res, next);\n      }\n      next();\n    }\n  };\n  mw.notFound = function (req, res, next) {\n    if (req.method !== 'GET' && req.method !== 'HEAD') {\n      res.writeHead(405, {'Content-Type': 'text/plain; charset=utf-8'});\n      res.end('Method not allowed\\n');\n    }\n    else {\n      if (options.notFoundPath) {\n        var cached = self.get(options.notFoundPath);\n        if (cached) dish.file(cached.fullPath, {status: 404})(req, res, next);\n        else default404();\n      }\n      else default404();\n\n      function default404 () {\n        res.writeHead(404, {'Content-Type': 'text/plain; charset=utf-8'});\n        res.end('Page not found\\n');\n        return;\n      }\n    }\n  };\n  return mw;\n};\n\nmodule.exports = function (root, options) {\n  if (root && toString.call(root) === '[object Object]') {\n    options = root;\n    root = options.root;\n  }\n  if (!root) {\n    try {\n      var stat = fs.statSync('public');\n      root = path.resolve('public');\n    }\n    catch (e) {}\n  }\n  return new Buffet([{globs: '**/*', cwd: root}], options).middleware(options);\n};\n\nmodule.exports.Buffet = Buffet;\n","/home/travis/build/npmtest/node-npmtest-buffet/node_modules/buffet/worker.js":"process.on('message', function (message) {\n  if (message.cmd === 'BUFFET_OPTIONS') {\n    start(message.options);\n  }\n});\n\nfunction start (options) {\n  var server = require('http').createServer()\n    , middler = require('middler')(server)\n\n  // Add the logger if needed\n  if (options.log) {\n    middler.add(require('accesslog')({path: typeof options.log === 'string' ? options.log : null}));\n  }\n\n  // Add buffet\n  var buffet = require('./')(options.root, options);\n  middler\n    .add(buffet)\n    .add(buffet.notFound);\n\n  // Send status back to cluster master\n  server.listen(options.port, function () {\n    process.send({cmd: 'BUFFET_UP', port: this.address().port});\n  });\n}","/home/travis/build/npmtest/node-npmtest-buffet/node_modules/buffet/bench/buffet.js":"exports.version = require(require('path').resolve(__dirname, '../package')).version;\n\nexports.middleware = function (options) {\n  return require('../')(options.root);\n};","/home/travis/build/npmtest/node-npmtest-buffet/node_modules/buffet/bench/buffet-server.js":"var execFile = require('child_process').execFile\n  , buffetRoot = require('path').resolve(__dirname, '..')\n  , buffet\n\nexports.version = require(buffetRoot + '/package.json').version;\n\nexports.listen = function (options, cb) {\n  var port = randomPort()\n\n  buffet = execFile(buffetRoot + '/bin/buffet.js', ['-p', port, '--no-log', '--no-watch'], {cwd: options.root});\n  buffet.stderr.on('data', function (chunk) {\n    if (chunk.toString().match(/listening/)) {\n      cb(null, port);\n    }\n  });\n};\n\nexports.close = function () {\n  buffet.kill();\n};\n\nfunction randomPort () {\n  return Math.round((Math.random() * 2e4) + 2e4);\n}","/home/travis/build/npmtest/node-npmtest-buffet/node_modules/buffet/bench/ecstatic.js":"exports.middleware = function (options) {\n  return require('ecstatic')(options.root, { cache: 7200 });\n};","/home/travis/build/npmtest/node-npmtest-buffet/node_modules/buffet/bench/node-static.js":"exports.middleware = function (options) {\n  var nodeStatic = require('node-static')\n    , fileServer = new(nodeStatic.Server)(options.root, { cache: 7200 })\n\n  return fileServer.serve.bind(fileServer);\n};","/home/travis/build/npmtest/node-npmtest-buffet/node_modules/buffet/bench/paperboy.js":"exports.middleware = function (options) {\n  var paperboy = require('paperboy');\n  return function (req, res, next) {\n    paperboy.deliver(options.root, req, res);\n  };\n};","/home/travis/build/npmtest/node-npmtest-buffet/node_modules/buffet/bench/send.js":"exports.middleware = function (options, cb) {\n  var send = require('send');\n  return function (req, res, next) {\n    send(req, req.url)\n      .root(options.root)\n      .pipe(res);\n  };\n};","/home/travis/build/npmtest/node-npmtest-buffet/node_modules/buffet/bench/st.js":"exports.middleware = function (options) {\n  return require('st')({\n    path: options.root,\n    url: '/',\n\n    cache: {\n      fd: {\n        max: 1000, // number of fd's to hang on to\n        maxAge: 1000*60*60, // amount of ms before fd's expire\n      },\n\n      stat: {\n        max: 5000, // number of stat objects to hang on to\n        maxAge: 1000 * 60, // number of ms that stats are good for\n      },\n\n      content: {\n        max: 1024*1024*64, // how much memory to use on caching contents\n        maxAge: 1000 * 60 * 10, // how long to cache contents for\n      }\n    }\n  });\n};","/home/travis/build/npmtest/node-npmtest-buffet/node_modules/buffet/bench/varnish.js":"var spawn = require('child_process').spawn\n  , execFile = require('child_process').execFile\n  , buffet\n  , varnish\n\nexports.name = 'varnish';\n\nexports.listen = function (options, cb) {\n  var buffetPort = randomPort()\n    , buffetRoot = require('path').resolve(__dirname, '..')\n    , port = randomPort() \n\n  buffet = execFile(buffetRoot + '/bin/buffet.js', ['-p', buffetPort], {cwd: options.root});\n  \n  varnish = spawn('varnishd', ['-F', '-n', require('idgen')(), '-s', 'malloc', '-b', '127.0.0.1:' + buffetPort, '-a', '127.0.0.1:' + port]);\n  varnish.stderr.on('data', function (chunk) {\n    if (chunk.toString().match(/Child starts/)) {\n      cb(null, port);\n    }\n  });\n};\n\nexports.close = function () {\n  varnish.kill();\n  buffet.kill();\n};\n\nfunction randomPort () {\n  return Math.round((Math.random() * 2e4) + 2e4);\n}","/home/travis/build/npmtest/node-npmtest-buffet/node_modules/buffet/bench/nginx/nginx.js":"var exec = require('child_process').exec\n  , join = require('path').join\n\nexports.name = 'nginx';\nexports.version = '1.2.4';\n\nexports.listen = function (options, cb) {\n  exec('nginx', ['-c', join(__dirname, 'nginx', 'nginx.conf')]);\n  setTimeout(function () {\n    cb(null, 8080);\n  }, 500);\n};\n\nexports.close = function () {\n  exec('nginx', ['-s', 'quit']);\n};"}